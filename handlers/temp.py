from aiogram import Router, types
from aiogram.filters import Command
from db.database import get_db_pool

router = Router()


@router.message(Command("temp"))
async def get_temp_handler(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        pool = get_db_pool()

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
        async with pool.acquire() as connection:
            record = await connection.fetchrow(
                "SELECT temperature, created_at FROM temperature_logs "
                "ORDER BY created_at DESC LIMIT 1"
            )

            if record:
                temp = record['temperature']
                time = record['created_at']
                await message.reply(
                    f"üå° –¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
                    f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {time}"
                )
            else:
                await message.reply("‚ùå –í –±–∞–∑–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ")

    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: {str(e)}")
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"Error in get_temp_handler: {str(e)}")