from aiogram import Router, types
from aiogram.filters import Command
from db.database import get_db_pool
import matplotlib.pyplot as plt
import io
from datetime import datetime, timedelta

router = Router()


@router.message(Command("temp"))
async def get_temp_handler(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        pool = get_db_pool()

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
        async with pool.acquire() as connection:
            record = await connection.fetchrow(
                "SELECT temperature, created_at FROM temperature_logs "
                "ORDER BY created_at DESC LIMIT 1"
            )

            if record:
                temp = record['temperature']
                time = record['created_at']
                await message.reply(
                    f"üå° –¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
                    f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {time}"
                )
            else:
                await message.reply("‚ùå –í –±–∞–∑–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ")

    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: {str(e)}")
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"Error in get_temp_handler: {str(e)}")


@router.message(Command("graph"))
async def get_temp_graph_handler(message: types.Message):
    try:
        pool = get_db_pool()

        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
        time_24h_ago = datetime.now() - timedelta(hours=24)

        async with pool.acquire() as connection:
            records = await connection.fetch(
                "SELECT temperature, created_at FROM temperature_logs "
                "WHERE created_at >= $1 ORDER BY created_at ASC",
                time_24h_ago
            )

            if not records:
                await message.reply("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏")
                return

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            temps = [record['temperature'] for record in records]
            times = [record['created_at'] for record in records]

            # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            plt.figure(figsize=(10, 5))
            plt.plot(times, temps, marker='o', linestyle='-', color='r', label='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞')

            # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –Ω–∞ —É—Ä–æ–≤–Ω–µ 60¬∞C
            plt.axhline(y=60, color='orange', linestyle='--', linewidth=1, label='–û–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞ (60¬∞C)')

            plt.title('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞')
            plt.xlabel('–í—Ä–µ–º—è')
            plt.ylabel('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)')
            plt.grid(True, alpha=0.3)
            plt.xticks(rotation=45)

            # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É
            plt.legend(loc='upper right')

            plt.tight_layout()

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –±—É—Ñ–µ—Ä
            buf = io.BytesIO()
            plt.savefig(buf, format='png', dpi=100)
            buf.seek(0)

            # –°–æ–∑–¥–∞–µ–º InputFile –∏–∑ –±—É—Ñ–µ—Ä–∞
            photo = types.BufferedInputFile(buf.read(), filename="temperature_graph.png")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
            await message.reply_photo(
                photo=photo,
                caption='üìà –ì—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞'
            )

            # –ó–∞–∫—Ä—ã—Ç–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∏ –±—É—Ñ–µ—Ä–∞
            plt.close()
            buf.close()

    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")
        print(f"Error in get_temp_graph_handler: {str(e)}")